
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.55 (git sha1 60f126cd00c94892782470192d6c9f7abebe7c05, clang++ 17.0.0 -fPIC -O3)

-- Running command `read_verilog -sv ../../rtl/audio_interface.sv; hierarchy -top audio_interface; synth -top audio_interface; stat' --

1. Executing Verilog-2005 frontend: ../../rtl/audio_interface.sv
Parsing SystemVerilog input from `../../rtl/audio_interface.sv' to AST representation.
Generating RTLIL representation for module `\audio_interface'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \audio_interface

2.2. Analyzing design hierarchy..
Top module:  \audio_interface
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \audio_interface

3.1.2. Analyzing design hierarchy..
Top module:  \audio_interface
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$../../rtl/audio_interface.sv:0$57 in module audio_interface.
Marked 1 switch rules as full_case in process $proc$../../rtl/audio_interface.sv:148$55 in module audio_interface.
Marked 2 switch rules as full_case in process $proc$../../rtl/audio_interface.sv:110$39 in module audio_interface.
Marked 2 switch rules as full_case in process $proc$../../rtl/audio_interface.sv:90$15 in module audio_interface.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 489 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n_i in `\audio_interface.$proc$../../rtl/audio_interface.sv:148$55'.
Found async reset \reset_n_i in `\audio_interface.$proc$../../rtl/audio_interface.sv:110$39'.
Found async reset \reset_n_i in `\audio_interface.$proc$../../rtl/audio_interface.sv:90$15'.

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~10 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\audio_interface.$proc$../../rtl/audio_interface.sv:0$57'.
     1/6: $6\next_state[2:0]
     2/6: $5\next_state[2:0]
     3/6: $4\next_state[2:0]
     4/6: $3\next_state[2:0]
     5/6: $2\next_state[2:0]
     6/6: $1\next_state[2:0]
Creating decoders for process `\audio_interface.$proc$../../rtl/audio_interface.sv:148$55'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\audio_interface.$proc$../../rtl/audio_interface.sv:0$53'.
Creating decoders for process `\audio_interface.$proc$../../rtl/audio_interface.sv:110$39'.
     1/485: $2\output_buffer[7679:0] [7679:7664]
     2/485: $2\output_buffer[7679:0] [7663:7648]
     3/485: $2\output_buffer[7679:0] [7647:7632]
     4/485: $2\output_buffer[7679:0] [7631:7616]
     5/485: $2\output_buffer[7679:0] [7615:7600]
     6/485: $2\output_buffer[7679:0] [7599:7584]
     7/485: $2\output_buffer[7679:0] [7583:7568]
     8/485: $2\output_buffer[7679:0] [7567:7552]
     9/485: $2\output_buffer[7679:0] [7551:7536]
    10/485: $2\output_buffer[7679:0] [7535:7520]
    11/485: $2\output_buffer[7679:0] [7519:7504]
    12/485: $2\output_buffer[7679:0] [7503:7488]
    13/485: $2\output_buffer[7679:0] [7487:7472]
    14/485: $2\output_buffer[7679:0] [7471:7456]
    15/485: $2\output_buffer[7679:0] [7455:7440]
    16/485: $2\output_buffer[7679:0] [7439:7424]
    17/485: $2\output_buffer[7679:0] [7423:7408]
    18/485: $2\output_buffer[7679:0] [7407:7392]
    19/485: $2\output_buffer[7679:0] [7391:7376]
    20/485: $2\output_buffer[7679:0] [7375:7360]
    21/485: $2\output_buffer[7679:0] [7359:7344]
    22/485: $2\output_buffer[7679:0] [7343:7328]
    23/485: $2\output_buffer[7679:0] [7327:7312]
    24/485: $2\output_buffer[7679:0] [7311:7296]
    25/485: $2\output_buffer[7679:0] [7295:7280]
    26/485: $2\output_buffer[7679:0] [7279:7264]
    27/485: $2\output_buffer[7679:0] [7263:7248]
    28/485: $2\output_buffer[7679:0] [7247:7232]
    29/485: $2\output_buffer[7679:0] [7231:7216]
    30/485: $2\output_buffer[7679:0] [7215:7200]
    31/485: $2\output_buffer[7679:0] [7199:7184]
    32/485: $2\output_buffer[7679:0] [7183:7168]
    33/485: $2\output_buffer[7679:0] [7167:7152]
    34/485: $2\output_buffer[7679:0] [7151:7136]
    35/485: $2\output_buffer[7679:0] [7135:7120]
    36/485: $2\output_buffer[7679:0] [7119:7104]
    37/485: $2\output_buffer[7679:0] [7103:7088]
    38/485: $2\output_buffer[7679:0] [7087:7072]
    39/485: $2\output_buffer[7679:0] [7071:7056]
    40/485: $2\output_buffer[7679:0] [7055:7040]
    41/485: $2\output_buffer[7679:0] [7039:7024]
    42/485: $2\output_buffer[7679:0] [7023:7008]
    43/485: $2\output_buffer[7679:0] [7007:6992]
    44/485: $2\output_buffer[7679:0] [6991:6976]
    45/485: $2\output_buffer[7679:0] [6975:6960]
    46/485: $2\output_buffer[7679:0] [6959:6944]
    47/485: $2\output_buffer[7679:0] [6943:6928]
    48/485: $2\output_buffer[7679:0] [6927:6912]
    49/485: $2\output_buffer[7679:0] [6911:6896]
    50/485: $2\output_buffer[7679:0] [6895:6880]
    51/485: $2\output_buffer[7679:0] [6879:6864]
    52/485: $2\output_buffer[7679:0] [6863:6848]
    53/485: $2\output_buffer[7679:0] [6847:6832]
    54/485: $2\output_buffer[7679:0] [6831:6816]
    55/485: $2\output_buffer[7679:0] [6815:6800]
    56/485: $2\output_buffer[7679:0] [6799:6784]
    57/485: $2\output_buffer[7679:0] [6783:6768]
    58/485: $2\output_buffer[7679:0] [6767:6752]
    59/485: $2\output_buffer[7679:0] [6751:6736]
    60/485: $2\output_buffer[7679:0] [6735:6720]
    61/485: $2\output_buffer[7679:0] [6719:6704]
    62/485: $2\output_buffer[7679:0] [6703:6688]
    63/485: $2\output_buffer[7679:0] [6687:6672]
    64/485: $2\output_buffer[7679:0] [6671:6656]
    65/485: $2\output_buffer[7679:0] [6655:6640]
    66/485: $2\output_buffer[7679:0] [6639:6624]
    67/485: $2\output_buffer[7679:0] [6623:6608]
    68/485: $2\output_buffer[7679:0] [6607:6592]
    69/485: $2\output_buffer[7679:0] [6591:6576]
    70/485: $2\output_buffer[7679:0] [6575:6560]
    71/485: $2\output_buffer[7679:0] [6559:6544]
    72/485: $2\output_buffer[7679:0] [6543:6528]
    73/485: $2\output_buffer[7679:0] [6527:6512]
    74/485: $2\output_buffer[7679:0] [6511:6496]
    75/485: $2\output_buffer[7679:0] [6495:6480]
    76/485: $2\output_buffer[7679:0] [6479:6464]
    77/485: $2\output_buffer[7679:0] [6463:6448]
    78/485: $2\output_buffer[7679:0] [6447:6432]
    79/485: $2\output_buffer[7679:0] [6431:6416]
    80/485: $2\output_buffer[7679:0] [6415:6400]
    81/485: $2\output_buffer[7679:0] [6399:6384]
    82/485: $2\output_buffer[7679:0] [6383:6368]
    83/485: $2\output_buffer[7679:0] [6367:6352]
    84/485: $2\output_buffer[7679:0] [6351:6336]
    85/485: $2\output_buffer[7679:0] [6335:6320]
    86/485: $2\output_buffer[7679:0] [6319:6304]
    87/485: $2\output_buffer[7679:0] [6303:6288]
    88/485: $2\output_buffer[7679:0] [6287:6272]
    89/485: $2\output_buffer[7679:0] [6271:6256]
    90/485: $2\output_buffer[7679:0] [6255:6240]
    91/485: $2\output_buffer[7679:0] [6239:6224]
    92/485: $2\output_buffer[7679:0] [6223:6208]
    93/485: $2\output_buffer[7679:0] [6207:6192]
    94/485: $2\output_buffer[7679:0] [6191:6176]
    95/485: $2\output_buffer[7679:0] [6175:6160]
    96/485: $2\output_buffer[7679:0] [6159:6144]
    97/485: $2\output_buffer[7679:0] [6143:6128]
    98/485: $2\output_buffer[7679:0] [6127:6112]
    99/485: $2\output_buffer[7679:0] [6111:6096]
   100/485: $2\output_buffer[7679:0] [6095:6080]
   101/485: $2\output_buffer[7679:0] [6079:6064]
   102/485: $2\output_buffer[7679:0] [6063:6048]
   103/485: $2\output_buffer[7679:0] [6047:6032]
   104/485: $2\output_buffer[7679:0] [6031:6016]
   105/485: $2\output_buffer[7679:0] [6015:6000]
   106/485: $2\output_buffer[7679:0] [5999:5984]
   107/485: $2\output_buffer[7679:0] [5983:5968]
   108/485: $2\output_buffer[7679:0] [5967:5952]
   109/485: $2\output_buffer[7679:0] [5951:5936]
   110/485: $2\output_buffer[7679:0] [5935:5920]
   111/485: $2\output_buffer[7679:0] [5919:5904]
   112/485: $2\output_buffer[7679:0] [5903:5888]
   113/485: $2\output_buffer[7679:0] [5887:5872]
   114/485: $2\output_buffer[7679:0] [5871:5856]
   115/485: $2\output_buffer[7679:0] [5855:5840]
   116/485: $2\output_buffer[7679:0] [5839:5824]
   117/485: $2\output_buffer[7679:0] [5823:5808]
   118/485: $2\output_buffer[7679:0] [5807:5792]
   119/485: $2\output_buffer[7679:0] [5791:5776]
   120/485: $2\output_buffer[7679:0] [5775:5760]
   121/485: $2\output_buffer[7679:0] [5759:5744]
   122/485: $2\output_buffer[7679:0] [5743:5728]
   123/485: $2\output_buffer[7679:0] [5727:5712]
   124/485: $2\output_buffer[7679:0] [5711:5696]
   125/485: $2\output_buffer[7679:0] [5695:5680]
   126/485: $2\output_buffer[7679:0] [5679:5664]
   127/485: $2\output_buffer[7679:0] [5663:5648]
   128/485: $2\output_buffer[7679:0] [5647:5632]
   129/485: $2\output_buffer[7679:0] [5631:5616]
   130/485: $2\output_buffer[7679:0] [5615:5600]
   131/485: $2\output_buffer[7679:0] [5599:5584]
   132/485: $2\output_buffer[7679:0] [5583:5568]
   133/485: $2\output_buffer[7679:0] [5567:5552]
   134/485: $2\output_buffer[7679:0] [5551:5536]
   135/485: $2\output_buffer[7679:0] [5535:5520]
   136/485: $2\output_buffer[7679:0] [5519:5504]
   137/485: $2\output_buffer[7679:0] [5503:5488]
   138/485: $2\output_buffer[7679:0] [5487:5472]
   139/485: $2\output_buffer[7679:0] [5471:5456]
   140/485: $2\output_buffer[7679:0] [5455:5440]
   141/485: $2\output_buffer[7679:0] [5439:5424]
   142/485: $2\output_buffer[7679:0] [5423:5408]
   143/485: $2\output_buffer[7679:0] [5407:5392]
   144/485: $2\output_buffer[7679:0] [5391:5376]
   145/485: $2\output_buffer[7679:0] [5375:5360]
   146/485: $2\output_buffer[7679:0] [5359:5344]
   147/485: $2\output_buffer[7679:0] [5343:5328]
   148/485: $2\output_buffer[7679:0] [5327:5312]
   149/485: $2\output_buffer[7679:0] [5311:5296]
   150/485: $2\output_buffer[7679:0] [5295:5280]
   151/485: $2\output_buffer[7679:0] [5279:5264]
   152/485: $2\output_buffer[7679:0] [5263:5248]
   153/485: $2\output_buffer[7679:0] [5247:5232]
   154/485: $2\output_buffer[7679:0] [5231:5216]
   155/485: $2\output_buffer[7679:0] [5215:5200]
   156/485: $2\output_buffer[7679:0] [5199:5184]
   157/485: $2\output_buffer[7679:0] [5183:5168]
   158/485: $2\output_buffer[7679:0] [5167:5152]
   159/485: $2\output_buffer[7679:0] [5151:5136]
   160/485: $2\output_buffer[7679:0] [5135:5120]
   161/485: $2\output_buffer[7679:0] [5119:5104]
   162/485: $2\output_buffer[7679:0] [5103:5088]
   163/485: $2\output_buffer[7679:0] [5087:5072]
   164/485: $2\output_buffer[7679:0] [5071:5056]
   165/485: $2\output_buffer[7679:0] [5055:5040]
   166/485: $2\output_buffer[7679:0] [5039:5024]
   167/485: $2\output_buffer[7679:0] [5023:5008]
   168/485: $2\output_buffer[7679:0] [5007:4992]
   169/485: $2\output_buffer[7679:0] [4991:4976]
   170/485: $2\output_buffer[7679:0] [4975:4960]
   171/485: $2\output_buffer[7679:0] [4959:4944]
   172/485: $2\output_buffer[7679:0] [4943:4928]
   173/485: $2\output_buffer[7679:0] [4927:4912]
   174/485: $2\output_buffer[7679:0] [4911:4896]
   175/485: $2\output_buffer[7679:0] [4895:4880]
   176/485: $2\output_buffer[7679:0] [4879:4864]
   177/485: $2\output_buffer[7679:0] [4863:4848]
   178/485: $2\output_buffer[7679:0] [4847:4832]
   179/485: $2\output_buffer[7679:0] [4831:4816]
   180/485: $2\output_buffer[7679:0] [4815:4800]
   181/485: $2\output_buffer[7679:0] [4799:4784]
   182/485: $2\output_buffer[7679:0] [4783:4768]
   183/485: $2\output_buffer[7679:0] [4767:4752]
   184/485: $2\output_buffer[7679:0] [4751:4736]
   185/485: $2\output_buffer[7679:0] [4735:4720]
   186/485: $2\output_buffer[7679:0] [4719:4704]
   187/485: $2\output_buffer[7679:0] [4703:4688]
   188/485: $2\output_buffer[7679:0] [4687:4672]
   189/485: $2\output_buffer[7679:0] [4671:4656]
   190/485: $2\output_buffer[7679:0] [4655:4640]
   191/485: $2\output_buffer[7679:0] [4639:4624]
   192/485: $2\output_buffer[7679:0] [4623:4608]
   193/485: $2\output_buffer[7679:0] [4607:4592]
   194/485: $2\output_buffer[7679:0] [4591:4576]
   195/485: $2\output_buffer[7679:0] [4575:4560]
   196/485: $2\output_buffer[7679:0] [4559:4544]
   197/485: $2\output_buffer[7679:0] [4543:4528]
   198/485: $2\output_buffer[7679:0] [4527:4512]
   199/485: $2\output_buffer[7679:0] [4511:4496]
   200/485: $2\output_buffer[7679:0] [4495:4480]
   201/485: $2\output_buffer[7679:0] [4479:4464]
   202/485: $2\output_buffer[7679:0] [4463:4448]
   203/485: $2\output_buffer[7679:0] [4447:4432]
   204/485: $2\output_buffer[7679:0] [4431:4416]
   205/485: $2\output_buffer[7679:0] [4415:4400]
   206/485: $2\output_buffer[7679:0] [4399:4384]
   207/485: $2\output_buffer[7679:0] [4383:4368]
   208/485: $2\output_buffer[7679:0] [4367:4352]
   209/485: $2\output_buffer[7679:0] [4351:4336]
   210/485: $2\output_buffer[7679:0] [4335:4320]
   211/485: $2\output_buffer[7679:0] [4319:4304]
   212/485: $2\output_buffer[7679:0] [4303:4288]
   213/485: $2\output_buffer[7679:0] [4287:4272]
   214/485: $2\output_buffer[7679:0] [4271:4256]
   215/485: $2\output_buffer[7679:0] [4255:4240]
   216/485: $2\output_buffer[7679:0] [4239:4224]
   217/485: $2\output_buffer[7679:0] [4223:4208]
   218/485: $2\output_buffer[7679:0] [4207:4192]
   219/485: $2\output_buffer[7679:0] [4191:4176]
   220/485: $2\output_buffer[7679:0] [4175:4160]
   221/485: $2\output_buffer[7679:0] [4159:4144]
   222/485: $2\output_buffer[7679:0] [4143:4128]
   223/485: $2\output_buffer[7679:0] [4127:4112]
   224/485: $2\output_buffer[7679:0] [4111:4096]
   225/485: $2\output_buffer[7679:0] [4095:4080]
   226/485: $2\output_buffer[7679:0] [4079:4064]
   227/485: $2\output_buffer[7679:0] [4063:4048]
   228/485: $2\output_buffer[7679:0] [4047:4032]
   229/485: $2\output_buffer[7679:0] [4031:4016]
   230/485: $2\output_buffer[7679:0] [4015:4000]
   231/485: $2\output_buffer[7679:0] [3999:3984]
   232/485: $2\output_buffer[7679:0] [3983:3968]
   233/485: $2\output_buffer[7679:0] [3967:3952]
   234/485: $2\output_buffer[7679:0] [3951:3936]
   235/485: $2\output_buffer[7679:0] [3935:3920]
   236/485: $2\output_buffer[7679:0] [3919:3904]
   237/485: $2\output_buffer[7679:0] [3903:3888]
   238/485: $2\output_buffer[7679:0] [3887:3872]
   239/485: $2\output_buffer[7679:0] [3871:3856]
   240/485: $2\output_buffer[7679:0] [3855:3840]
   241/485: $2\output_buffer[7679:0] [3839:3824]
   242/485: $2\output_buffer[7679:0] [3823:3808]
   243/485: $2\output_buffer[7679:0] [3807:3792]
   244/485: $2\output_buffer[7679:0] [3791:3776]
   245/485: $2\output_buffer[7679:0] [3775:3760]
   246/485: $2\output_buffer[7679:0] [3759:3744]
   247/485: $2\output_buffer[7679:0] [3743:3728]
   248/485: $2\output_buffer[7679:0] [3727:3712]
   249/485: $2\output_buffer[7679:0] [3711:3696]
   250/485: $2\output_buffer[7679:0] [3695:3680]
   251/485: $2\output_buffer[7679:0] [3679:3664]
   252/485: $2\output_buffer[7679:0] [3663:3648]
   253/485: $2\output_buffer[7679:0] [3647:3632]
   254/485: $2\output_buffer[7679:0] [3631:3616]
   255/485: $2\output_buffer[7679:0] [3615:3600]
   256/485: $2\output_buffer[7679:0] [3599:3584]
   257/485: $2\output_buffer[7679:0] [3583:3568]
   258/485: $2\output_buffer[7679:0] [3567:3552]
   259/485: $2\output_buffer[7679:0] [3551:3536]
   260/485: $2\output_buffer[7679:0] [3535:3520]
   261/485: $2\output_buffer[7679:0] [3519:3504]
   262/485: $2\output_buffer[7679:0] [3503:3488]
   263/485: $2\output_buffer[7679:0] [3487:3472]
   264/485: $2\output_buffer[7679:0] [3471:3456]
   265/485: $2\output_buffer[7679:0] [3455:3440]
   266/485: $2\output_buffer[7679:0] [3439:3424]
   267/485: $2\output_buffer[7679:0] [3423:3408]
   268/485: $2\output_buffer[7679:0] [3407:3392]
   269/485: $2\output_buffer[7679:0] [3391:3376]
   270/485: $2\output_buffer[7679:0] [3375:3360]
   271/485: $2\output_buffer[7679:0] [3359:3344]
   272/485: $2\output_buffer[7679:0] [3343:3328]
   273/485: $2\output_buffer[7679:0] [3327:3312]
   274/485: $2\output_buffer[7679:0] [3311:3296]
   275/485: $2\output_buffer[7679:0] [3295:3280]
   276/485: $2\output_buffer[7679:0] [3279:3264]
   277/485: $2\output_buffer[7679:0] [3263:3248]
   278/485: $2\output_buffer[7679:0] [3247:3232]
   279/485: $2\output_buffer[7679:0] [3231:3216]
   280/485: $2\output_buffer[7679:0] [3215:3200]
   281/485: $2\output_buffer[7679:0] [3199:3184]
   282/485: $2\output_buffer[7679:0] [3183:3168]
   283/485: $2\output_buffer[7679:0] [3167:3152]
   284/485: $2\output_buffer[7679:0] [3151:3136]
   285/485: $2\output_buffer[7679:0] [3135:3120]
   286/485: $2\output_buffer[7679:0] [3119:3104]
   287/485: $2\output_buffer[7679:0] [3103:3088]
   288/485: $2\output_buffer[7679:0] [3087:3072]
   289/485: $2\output_buffer[7679:0] [3071:3056]
   290/485: $2\output_buffer[7679:0] [3055:3040]
   291/485: $2\output_buffer[7679:0] [3039:3024]
   292/485: $2\output_buffer[7679:0] [3023:3008]
   293/485: $2\output_buffer[7679:0] [3007:2992]
   294/485: $2\output_buffer[7679:0] [2991:2976]
   295/485: $2\output_buffer[7679:0] [2975:2960]
   296/485: $2\output_buffer[7679:0] [2959:2944]
   297/485: $2\output_buffer[7679:0] [2943:2928]
   298/485: $2\output_buffer[7679:0] [2927:2912]
   299/485: $2\output_buffer[7679:0] [2911:2896]
   300/485: $2\output_buffer[7679:0] [2895:2880]
   301/485: $2\output_buffer[7679:0] [2879:2864]
   302/485: $2\output_buffer[7679:0] [2863:2848]
   303/485: $2\output_buffer[7679:0] [2847:2832]
   304/485: $2\output_buffer[7679:0] [2831:2816]
   305/485: $2\output_buffer[7679:0] [2815:2800]
   306/485: $2\output_buffer[7679:0] [2799:2784]
   307/485: $2\output_buffer[7679:0] [2783:2768]
   308/485: $2\output_buffer[7679:0] [2767:2752]
   309/485: $2\output_buffer[7679:0] [2751:2736]
   310/485: $2\output_buffer[7679:0] [2735:2720]
   311/485: $2\output_buffer[7679:0] [2719:2704]
   312/485: $2\output_buffer[7679:0] [2703:2688]
   313/485: $2\output_buffer[7679:0] [2687:2672]
   314/485: $2\output_buffer[7679:0] [2671:2656]
   315/485: $2\output_buffer[7679:0] [2655:2640]
   316/485: $2\output_buffer[7679:0] [2639:2624]
   317/485: $2\output_buffer[7679:0] [2623:2608]
   318/485: $2\output_buffer[7679:0] [2607:2592]
   319/485: $2\output_buffer[7679:0] [2591:2576]
   320/485: $2\output_buffer[7679:0] [2575:2560]
   321/485: $2\output_buffer[7679:0] [2559:2544]
   322/485: $2\output_buffer[7679:0] [2543:2528]
   323/485: $2\output_buffer[7679:0] [2527:2512]
   324/485: $2\output_buffer[7679:0] [2511:2496]
   325/485: $2\output_buffer[7679:0] [2495:2480]
   326/485: $2\output_buffer[7679:0] [2479:2464]
   327/485: $2\output_buffer[7679:0] [2463:2448]
   328/485: $2\output_buffer[7679:0] [2447:2432]
   329/485: $2\output_buffer[7679:0] [2431:2416]
   330/485: $2\output_buffer[7679:0] [2415:2400]
   331/485: $2\output_buffer[7679:0] [2399:2384]
   332/485: $2\output_buffer[7679:0] [2383:2368]
   333/485: $2\output_buffer[7679:0] [2367:2352]
   334/485: $2\output_buffer[7679:0] [2351:2336]
   335/485: $2\output_buffer[7679:0] [2335:2320]
   336/485: $2\output_buffer[7679:0] [2319:2304]
   337/485: $2\output_buffer[7679:0] [2303:2288]
   338/485: $2\output_buffer[7679:0] [2287:2272]
   339/485: $2\output_buffer[7679:0] [2271:2256]
   340/485: $2\output_buffer[7679:0] [2255:2240]
   341/485: $2\output_buffer[7679:0] [2239:2224]
   342/485: $2\output_buffer[7679:0] [2223:2208]
   343/485: $2\output_buffer[7679:0] [2207:2192]
   344/485: $2\output_buffer[7679:0] [2191:2176]
   345/485: $2\output_buffer[7679:0] [2175:2160]
   346/485: $2\output_buffer[7679:0] [2159:2144]
   347/485: $2\output_buffer[7679:0] [2143:2128]
   348/485: $2\output_buffer[7679:0] [2127:2112]
   349/485: $2\output_buffer[7679:0] [2111:2096]
   350/485: $2\output_buffer[7679:0] [2095:2080]
   351/485: $2\output_buffer[7679:0] [2079:2064]
   352/485: $2\output_buffer[7679:0] [2063:2048]
   353/485: $2\output_buffer[7679:0] [2047:2032]
   354/485: $2\output_buffer[7679:0] [2031:2016]
   355/485: $2\output_buffer[7679:0] [2015:2000]
   356/485: $2\output_buffer[7679:0] [1999:1984]
   357/485: $2\output_buffer[7679:0] [1983:1968]
   358/485: $2\output_buffer[7679:0] [1967:1952]
   359/485: $2\output_buffer[7679:0] [1951:1936]
   360/485: $2\output_buffer[7679:0] [1935:1920]
   361/485: $2\output_buffer[7679:0] [1919:1904]
   362/485: $2\output_buffer[7679:0] [1903:1888]
   363/485: $2\output_buffer[7679:0] [1887:1872]
   364/485: $2\output_buffer[7679:0] [1871:1856]
   365/485: $2\output_buffer[7679:0] [1855:1840]
   366/485: $2\output_buffer[7679:0] [1839:1824]
   367/485: $2\output_buffer[7679:0] [1823:1808]
   368/485: $2\output_buffer[7679:0] [1807:1792]
   369/485: $2\output_buffer[7679:0] [1791:1776]
   370/485: $2\output_buffer[7679:0] [1775:1760]
   371/485: $2\output_buffer[7679:0] [1759:1744]
   372/485: $2\output_buffer[7679:0] [1743:1728]
   373/485: $2\output_buffer[7679:0] [1727:1712]
   374/485: $2\output_buffer[7679:0] [1711:1696]
   375/485: $2\output_buffer[7679:0] [1695:1680]
   376/485: $2\output_buffer[7679:0] [1679:1664]
   377/485: $2\output_buffer[7679:0] [1663:1648]
   378/485: $2\output_buffer[7679:0] [1647:1632]
   379/485: $2\output_buffer[7679:0] [1631:1616]
   380/485: $2\output_buffer[7679:0] [1615:1600]
   381/485: $2\output_buffer[7679:0] [1599:1584]
   382/485: $2\output_buffer[7679:0] [1583:1568]
   383/485: $2\output_buffer[7679:0] [1567:1552]
   384/485: $2\output_buffer[7679:0] [1551:1536]
   385/485: $2\output_buffer[7679:0] [1535:1520]
   386/485: $2\output_buffer[7679:0] [1519:1504]
   387/485: $2\output_buffer[7679:0] [1503:1488]
   388/485: $2\output_buffer[7679:0] [1487:1472]
   389/485: $2\output_buffer[7679:0] [1471:1456]
   390/485: $2\output_buffer[7679:0] [1455:1440]
   391/485: $2\output_buffer[7679:0] [1439:1424]
   392/485: $2\output_buffer[7679:0] [1423:1408]
   393/485: $2\output_buffer[7679:0] [1407:1392]
   394/485: $2\output_buffer[7679:0] [1391:1376]
   395/485: $2\output_buffer[7679:0] [1375:1360]
   396/485: $2\output_buffer[7679:0] [1359:1344]
   397/485: $2\output_buffer[7679:0] [1343:1328]
   398/485: $2\output_buffer[7679:0] [1327:1312]
   399/485: $2\output_buffer[7679:0] [1311:1296]
   400/485: $2\output_buffer[7679:0] [1295:1280]
   401/485: $2\output_buffer[7679:0] [1279:1264]
   402/485: $2\output_buffer[7679:0] [1263:1248]
   403/485: $2\output_buffer[7679:0] [1247:1232]
   404/485: $2\output_buffer[7679:0] [1231:1216]
   405/485: $2\output_buffer[7679:0] [1215:1200]
   406/485: $2\output_buffer[7679:0] [1199:1184]
   407/485: $2\output_buffer[7679:0] [1183:1168]
   408/485: $2\output_buffer[7679:0] [1167:1152]
   409/485: $2\output_buffer[7679:0] [1151:1136]
   410/485: $2\output_buffer[7679:0] [1135:1120]
   411/485: $2\output_buffer[7679:0] [1119:1104]
   412/485: $2\output_buffer[7679:0] [1103:1088]
   413/485: $2\output_buffer[7679:0] [1087:1072]
   414/485: $2\output_buffer[7679:0] [1071:1056]
   415/485: $2\output_buffer[7679:0] [1055:1040]
   416/485: $2\output_buffer[7679:0] [1039:1024]
   417/485: $2\output_buffer[7679:0] [1023:1008]
   418/485: $2\output_buffer[7679:0] [1007:992]
   419/485: $2\output_buffer[7679:0] [991:976]
   420/485: $2\output_buffer[7679:0] [975:960]
   421/485: $2\output_buffer[7679:0] [959:944]
   422/485: $2\output_buffer[7679:0] [943:928]
   423/485: $2\output_buffer[7679:0] [927:912]
   424/485: $2\output_buffer[7679:0] [911:896]
   425/485: $2\output_buffer[7679:0] [895:880]
   426/485: $2\output_buffer[7679:0] [879:864]
   427/485: $2\output_buffer[7679:0] [863:848]
   428/485: $2\output_buffer[7679:0] [847:832]
   429/485: $2\output_buffer[7679:0] [831:816]
   430/485: $2\output_buffer[7679:0] [815:800]
   431/485: $2\output_buffer[7679:0] [799:784]
   432/485: $2\output_buffer[7679:0] [783:768]
   433/485: $2\output_buffer[7679:0] [767:752]
   434/485: $2\output_buffer[7679:0] [751:736]
   435/485: $2\output_buffer[7679:0] [735:720]
   436/485: $2\output_buffer[7679:0] [719:704]
   437/485: $2\output_buffer[7679:0] [703:688]
   438/485: $2\output_buffer[7679:0] [687:672]
   439/485: $2\output_buffer[7679:0] [671:656]
   440/485: $2\output_buffer[7679:0] [655:640]
   441/485: $2\output_buffer[7679:0] [639:624]
   442/485: $2\output_buffer[7679:0] [623:608]
   443/485: $2\output_buffer[7679:0] [607:592]
   444/485: $2\output_buffer[7679:0] [591:576]
   445/485: $2\output_buffer[7679:0] [575:560]
   446/485: $2\output_buffer[7679:0] [559:544]
   447/485: $2\output_buffer[7679:0] [543:528]
   448/485: $2\output_buffer[7679:0] [527:512]
   449/485: $2\output_buffer[7679:0] [511:496]
   450/485: $2\output_buffer[7679:0] [495:480]
   451/485: $2\output_buffer[7679:0] [479:464]
   452/485: $2\output_buffer[7679:0] [463:448]
   453/485: $2\output_buffer[7679:0] [447:432]
   454/485: $2\output_buffer[7679:0] [431:416]
   455/485: $2\output_buffer[7679:0] [415:400]
   456/485: $2\output_buffer[7679:0] [399:384]
   457/485: $2\output_buffer[7679:0] [383:368]
   458/485: $2\output_buffer[7679:0] [367:352]
   459/485: $2\output_buffer[7679:0] [351:336]
   460/485: $2\output_buffer[7679:0] [335:320]
   461/485: $2\output_buffer[7679:0] [319:304]
   462/485: $2\output_buffer[7679:0] [303:288]
   463/485: $2\output_buffer[7679:0] [287:272]
   464/485: $2\output_buffer[7679:0] [271:256]
   465/485: $2\output_buffer[7679:0] [255:240]
   466/485: $2\output_buffer[7679:0] [239:224]
   467/485: $2\output_buffer[7679:0] [223:208]
   468/485: $2\output_buffer[7679:0] [207:192]
   469/485: $2\output_buffer[7679:0] [191:176]
   470/485: $2\output_buffer[7679:0] [175:160]
   471/485: $2\output_buffer[7679:0] [159:144]
   472/485: $2\output_buffer[7679:0] [143:128]
   473/485: $2\output_buffer[7679:0] [127:112]
   474/485: $2\output_buffer[7679:0] [111:96]
   475/485: $2\output_buffer[7679:0] [95:80]
   476/485: $2\output_buffer[7679:0] [79:64]
   477/485: $2\output_buffer[7679:0] [63:48]
   478/485: $2\output_buffer[7679:0] [47:32]
   479/485: $2\output_buffer[7679:0] [31:16]
   480/485: $2\output_buffer[7679:0] [15:0]
   481/485: $2$fordecl_block$5.i[31:0]$46
   482/485: $1$fordecl_block$5.i[31:0]$44
   483/485: $1\output_buffer[7679:0]
   484/485: $1$fordecl_block$3.i[31:0]$43
   485/485: $0\output_count[9:0]
Creating decoders for process `\audio_interface.$proc$../../rtl/audio_interface.sv:90$15'.
     1/7: $2$lookahead\frame_buffer$14[7679:0]$27
     2/7: $2$bitselwrite$pos$../../rtl/audio_interface.sv:99$9[31:0]$26
     3/7: $1$lookahead\frame_buffer$14[7679:0]$22
     4/7: $1$bitselwrite$pos$../../rtl/audio_interface.sv:99$9[31:0]$21
     5/7: $1$fordecl_block$1.i[31:0]$20
     6/7: $1\frame_buffer[7679:0]
     7/7: $0\frame_count[9:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\audio_interface.\next_state' from process `\audio_interface.$proc$../../rtl/audio_interface.sv:0$57'.
No latch inferred for signal `\audio_interface.\frame_data_bus_o' from process `\audio_interface.$proc$../../rtl/audio_interface.sv:0$53'.
No latch inferred for signal `\audio_interface.$fordecl_block$7.i' from process `\audio_interface.$proc$../../rtl/audio_interface.sv:0$53'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\audio_interface.\current_state' using process `\audio_interface.$proc$../../rtl/audio_interface.sv:148$55'.
  created $adff cell `$procdff$1578' with positive edge clock and positive level reset.
Creating register for signal `\audio_interface.\output_buffer' using process `\audio_interface.$proc$../../rtl/audio_interface.sv:110$39'.
  created $adff cell `$procdff$1583' with positive edge clock and positive level reset.
Creating register for signal `\audio_interface.\output_count' using process `\audio_interface.$proc$../../rtl/audio_interface.sv:110$39'.
  created $adff cell `$procdff$1588' with positive edge clock and positive level reset.
Creating register for signal `\audio_interface.$fordecl_block$3.i' using process `\audio_interface.$proc$../../rtl/audio_interface.sv:110$39'.
  created $adff cell `$procdff$1593' with positive edge clock and positive level reset.
Creating register for signal `\audio_interface.$fordecl_block$5.i' using process `\audio_interface.$proc$../../rtl/audio_interface.sv:110$39'.
  created $dff cell `$procdff$1600' with positive edge clock.
Creating register for signal `\audio_interface.\frame_buffer' using process `\audio_interface.$proc$../../rtl/audio_interface.sv:90$15'.
  created $dff cell `$procdff$1607' with positive edge clock.
Creating register for signal `\audio_interface.\frame_count' using process `\audio_interface.$proc$../../rtl/audio_interface.sv:90$15'.
  created $adff cell `$procdff$1612' with positive edge clock and positive level reset.
Creating register for signal `\audio_interface.$fordecl_block$1.i' using process `\audio_interface.$proc$../../rtl/audio_interface.sv:90$15'.
  created $adff cell `$procdff$1617' with positive edge clock and positive level reset.
Creating register for signal `\audio_interface.$bitselwrite$pos$../../rtl/audio_interface.sv:99$9' using process `\audio_interface.$proc$../../rtl/audio_interface.sv:90$15'.
  created $adff cell `$procdff$1622' with positive edge clock and positive level reset.
Creating register for signal `\audio_interface.$lookahead\frame_buffer$14' using process `\audio_interface.$proc$../../rtl/audio_interface.sv:90$15'.
  created $adff cell `$procdff$1627' with positive edge clock and positive level reset.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\audio_interface.$proc$../../rtl/audio_interface.sv:0$57'.
Removing empty process `audio_interface.$proc$../../rtl/audio_interface.sv:0$57'.
Removing empty process `audio_interface.$proc$../../rtl/audio_interface.sv:148$55'.
Removing empty process `audio_interface.$proc$../../rtl/audio_interface.sv:0$53'.
Found and cleaned up 2 empty switches in `\audio_interface.$proc$../../rtl/audio_interface.sv:110$39'.
Removing empty process `audio_interface.$proc$../../rtl/audio_interface.sv:110$39'.
Found and cleaned up 2 empty switches in `\audio_interface.$proc$../../rtl/audio_interface.sv:90$15'.
Removing empty process `audio_interface.$proc$../../rtl/audio_interface.sv:90$15'.
Cleaned up 10 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.
<suppressed ~26 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.
<suppressed ~6 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..
Removed 24 unused cells and 1048 unused wires.
<suppressed ~28 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module audio_interface...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \audio_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$106.
    dead port 2/2 on $mux $procmux$72.
    dead port 2/2 on $mux $procmux$79.
    dead port 2/2 on $mux $procmux$87.
    dead port 2/2 on $mux $procmux$96.
Removed 5 multiplexer ports.
<suppressed ~485 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \audio_interface.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \audio_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~485 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \audio_interface.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking audio_interface.current_state as FSM state register:
    Circuit seems to be self-resetting.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \audio_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~485 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \audio_interface.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1612 ($adff) from module audio_interface (D = $0\frame_count[9:0], Q = \frame_count).
Adding EN signal on $procdff$1607 ($dff) from module audio_interface (D = $or$../../rtl/audio_interface.sv:0$36_Y, Q = \frame_buffer).
Adding EN signal on $procdff$1588 ($adff) from module audio_interface (D = $0\output_count[9:0], Q = \output_count).
Adding EN signal on $procdff$1583 ($adff) from module audio_interface (D = \frame_buffer, Q = \output_buffer).
Adding EN signal on $procdff$1578 ($adff) from module audio_interface (D = \next_state, Q = \current_state).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..
Removed 482 unused cells and 3 unused wires.
<suppressed ~483 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.
<suppressed ~2 debug messages>

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \audio_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \audio_interface.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 10) from port B of cell audio_interface.$eq$../../rtl/audio_interface.sv:81$10 ($eq).
Removed top 18 bits (of 33) from port A of cell audio_interface.$neg$../../rtl/audio_interface.sv:0$30 ($neg).
Converting cell audio_interface.$neg$../../rtl/audio_interface.sv:0$30 ($neg) from signed to unsigned.
Removed top 1 bits (of 15) from port A of cell audio_interface.$neg$../../rtl/audio_interface.sv:0$30 ($neg).
Removed top 31 bits (of 32) from port B of cell audio_interface.$add$../../rtl/audio_interface.sv:100$37 ($add).
Removed top 22 bits (of 32) from port Y of cell audio_interface.$add$../../rtl/audio_interface.sv:100$37 ($add).
Removed top 31 bits (of 32) from port B of cell audio_interface.$sub$../../rtl/audio_interface.sv:124$50 ($sub).
Removed top 21 bits (of 32) from port Y of cell audio_interface.$sub$../../rtl/audio_interface.sv:124$50 ($sub).
Removed top 31 bits (of 32) from port B of cell audio_interface.$gt$../../rtl/audio_interface.sv:134$51 ($gt).
Removed top 17 bits (of 32) from port B of cell audio_interface.$shiftx$../../rtl/audio_interface.sv:0$63 ($shiftx).
Removed top 1 bits (of 3) from port B of cell audio_interface.$eq$../../rtl/audio_interface.sv:207$65 ($eq).
Removed top 2 bits (of 3) from mux cell audio_interface.$procmux$70 ($mux).
Removed top 1 bits (of 3) from port B of cell audio_interface.$procmux$112_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell audio_interface.$procmux$113_CMP0 ($eq).
Removed top 2 bits (of 3) from wire audio_interface.$6\next_state[2:0].
Removed top 22 bits (of 32) from wire audio_interface.$add$../../rtl/audio_interface.sv:100$37_Y.
Removed top 4 bits (of 32) from wire audio_interface.$sub$../../rtl/audio_interface.sv:124$50_Y.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module audio_interface:
  creating $macc model for $add$../../rtl/audio_interface.sv:100$37 ($add).
  creating $macc model for $neg$../../rtl/audio_interface.sv:0$30 ($neg).
  creating $macc model for $sub$../../rtl/audio_interface.sv:124$50 ($sub).
  creating $alu model for $macc $sub$../../rtl/audio_interface.sv:124$50.
  creating $alu model for $macc $neg$../../rtl/audio_interface.sv:0$30.
  creating $alu model for $macc $add$../../rtl/audio_interface.sv:100$37.
  creating $alu model for $gt$../../rtl/audio_interface.sv:134$51 ($gt): new $alu
  creating $alu cell for $gt$../../rtl/audio_interface.sv:134$51: $auto$alumacc.cc:495:replace_alu$1653
  creating $alu cell for $add$../../rtl/audio_interface.sv:100$37: $auto$alumacc.cc:495:replace_alu$1664
  creating $alu cell for $neg$../../rtl/audio_interface.sv:0$30: $auto$alumacc.cc:495:replace_alu$1667
  creating $alu cell for $sub$../../rtl/audio_interface.sv:124$50: $auto$alumacc.cc:495:replace_alu$1670
  created 4 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.
<suppressed ~4 debug messages>

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \audio_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \audio_interface.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..
Removed 1 unused cells and 7 unused wires.
<suppressed ~3 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \audio_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \audio_interface.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.
<suppressed ~7 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \audio_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \audio_interface.
    Consolidated identical input bits for $mux cell $ternary$../../rtl/audio_interface.sv:134$52:
      Old portsframe_data_valid_o
      New ports: A=1'1, B=1'0, Y=\frame_data_valid_o [0]
      New connections: \frame_data_valid_o [479:1] = { \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] \frame_data_valid_o [0] }
  Optimizing cells in module \audio_interface.
Performed a total of 1 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.
<suppressed ~1 debug messages>

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \audio_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \audio_interface.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.

3.19.18. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$1e8c376286295ea5767a0416bc3548f868074797\_90_alu for cells of type $alu.
Using template $paramod$b10e85f66bb0c69191909d3a1907903deeafce66\_90_alu for cells of type $alu.
Using template $paramod$constmap:53b8ec68d7f391fb90a95f54cb80ca633fb61939$paramod$99f65a5dfeb487370d42831ea94a31c028df9521\_90_shift_shiftx for cells of type $shift.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Analyzing pattern of constant bits for this cell:
Creating constmapped module `$paramod$constmap:63dad414417adbaba8c22786076f2c6048ec393f$paramod$99f65a5dfeb487370d42831ea94a31c028df9521\_90_shift_shiftx'.

3.20.12. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:63dad414417adbaba8c22786076f2c6048ec393f$paramod$99f65a5dfeb487370d42831ea94a31c028df9521\_90_shift_shiftx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1922.
    dead port 2/2 on $mux $procmux$1916.
    dead port 2/2 on $mux $procmux$1910.
    dead port 2/2 on $mux $procmux$1904.
    dead port 2/2 on $mux $procmux$1898.
    dead port 2/2 on $mux $procmux$1892.
    dead port 2/2 on $mux $procmux$1886.
    dead port 2/2 on $mux $procmux$1880.
    dead port 2/2 on $mux $procmux$1874.
    dead port 2/2 on $mux $procmux$1868.
    dead port 2/2 on $mux $procmux$1862.
    dead port 2/2 on $mux $procmux$1856.
    dead port 2/2 on $mux $procmux$1850.
    dead port 2/2 on $mux $procmux$1844.
Removed 14 multiplexer ports.
<suppressed ~442 debug messages>

3.20.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:63dad414417adbaba8c22786076f2c6048ec393f$paramod$99f65a5dfeb487370d42831ea94a31c028df9521\_90_shift_shiftx.
<suppressed ~20 debug messages>
Removed 0 unused cells and 19 unused wires.
Using template $paramod$constmap:63dad414417adbaba8c22786076f2c6048ec393f$paramod$99f65a5dfeb487370d42831ea94a31c028df9521\_90_shift_shiftx for cells of type $shift.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_90_alu for cells of type $alu.
Using template $paramod$constmap:b7d4bf1b56931b28e8ccbaa026df30aa67b94467$paramod$5455d5a9e3bdb56ebc1ce924a4f012b8c3ae6018\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$56f7ce6d87f8add68ca646dc02d7695a3189f8e5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100001 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001011 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using extmapper simplemap for cells of type $reduce_or.
No more expansions possible.
<suppressed ~1017 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.
<suppressed ~806233 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
<suppressed ~114585 debug messages>
Removed a total of 38195 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..
Removed 188326 unused cells and 426 unused wires.
<suppressed ~188328 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\audio_interface' to `<abc-temp-dir>/input.blif'..
Replacing 7712 occurrences of constant undef bits with constant zero bits
Extracted 56611 gates and 72017 wires to a netlist network with 15403 inputs and 7728 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:            ANDNOT cells:    16358
ABC RESULTS:               MUX cells:     7665
ABC RESULTS:              NAND cells:       17
ABC RESULTS:               NOR cells:       21
ABC RESULTS:               NOT cells:       22
ABC RESULTS:                OR cells:    24687
ABC RESULTS:             ORNOT cells:     7269
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:               XOR cells:       21
ABC RESULTS:        internal signals:    48886
ABC RESULTS:           input signals:    15403
ABC RESULTS:          output signals:     7728
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module audio_interface.
<suppressed ~3840 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\audio_interface'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \audio_interface..
Removed 0 unused cells and 15593 unused wires.
<suppressed ~2 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `audio_interface'. Setting top module to audio_interface.

3.24.1. Analyzing design hierarchy..
Top module:  \audio_interface

3.24.2. Analyzing design hierarchy..
Top module:  \audio_interface
Removed 0 unused modules.

3.25. Printing statistics.

=== audio_interface ===

   Number of wires:              56050
   Number of wire bits:          79651
   Number of public wires:          22
   Number of public wire bits:   23605
   Number of ports:                 15
   Number of port bits:           8218
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              71452
     $_ANDNOT_                   16358
     $_AND_                          8
     $_DFFE_PN0P_                 7703
     $_DFFE_PP_                   7680
     $_MUX_                       7665
     $_NAND_                        17
     $_NOR_                         17
     $_NOT_                         22
     $_ORNOT_                     7269
     $_OR_                       24686
     $_XNOR_                         6
     $_XOR_                         21

3.26. Executing CHECK pass (checking for obvious problems).
Checking module audio_interface...
Found and reported 0 problems.

4. Printing statistics.

=== audio_interface ===

   Number of wires:              56050
   Number of wire bits:          79651
   Number of public wires:          22
   Number of public wire bits:   23605
   Number of ports:                 15
   Number of port bits:           8218
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              71452
     $_ANDNOT_                   16358
     $_AND_                          8
     $_DFFE_PN0P_                 7703
     $_DFFE_PP_                   7680
     $_MUX_                       7665
     $_NAND_                        17
     $_NOR_                         17
     $_NOT_                         22
     $_ORNOT_                     7269
     $_OR_                       24686
     $_XNOR_                         6
     $_XOR_                         21

End of script. Logfile hash: 71cd1a0088, CPU: user 35.51s system 2.15s, MEM: 1871.45 MB peak
Yosys 0.55 (git sha1 60f126cd00c94892782470192d6c9f7abebe7c05, clang++ 17.0.0 -fPIC -O3)
Time spent: 31% 28x opt_expr (12 sec), 15% 5x clean (5 sec), ...
